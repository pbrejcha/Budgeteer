Peter - 9/14 {
	I figured that we could just keep a log of what we're doing and any ideas we have re:the project.
	I created a models notes page to get some ideas about what kind of back-end models we'll need for the initial sprint.
	
	My idea for this first sprint is to simply have a page where a user can faux-login, then view a page of their accounts, click into those and get a quick summary of their remaining balance and transactions. Regarding authentication, I figured it could just be simple mock-authentication, but I'm also open to using some Express authentication framework if you want. I found this: http://everyauth.com/ and it looks like it has a lot of support and appears to be fairly straightforward. 

	I'm not sure how formal of agile you wanted to go with this, but I'm down for any real management strategies, whether that be simply setting a date to complete this first sprint by, or even hashing out some real tasks in some project management app (tasky? :-P).
}
Peter - 9/15 {
	I installed Git Flow for branch management while developing this thing. We use it on my current project at work and it's been really nice for independent development of different project features. It's pretty easy to get going on Mac. Install homebrew if you haven't already (http://brew.sh/ link at the bottom of the page). After that's installed, type in 'brew install git-flow', no quotes, to install git-flow. 

	The basic premise behind git flow is that your branches are separated by responsibilities. The master branch is the release branch used only for major project releases. The develop branch should only contain stable code and is where you would merge future release features to. Most of the development is done on feature branches (these will be prefixed by 'feature/'). For instance, if we had just completed a release, and were sitting on the release branch, the work flow might go something like:
	-on release branch: git flow feature start MYNEWFEATURE
	-on feature/MYNEWFEATURE: {do work, code} {commit often so we have places to revert to, push to origin}
	-on feature/MYNEWFEATURE: git checkout develop
	-on develop: git merge feature/MYNEWFEATURE
	-on develop: {add, commit, and push to remote repo}

	For a more in-depth explanation, take a look at http://danielkummer.github.io/git-flow-cheatsheet/ 
}